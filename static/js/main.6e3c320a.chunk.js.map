{"version":3,"sources":["algorithms/mergesort.js","algorithms/selectionsort.js","components/visualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["mergesort","array","barsAnimation","length","auxArray","slice","mergeHelper","mainArray","sidx","eidx","mididx","Math","floor","k","i","j","push","doMerge","animations","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","getAnimation","selectionsort","animation","min","temp","anim","a","b","colorChange","x","Visualizer","getRandomInt","max","random","resetArray","size","setState","handleChange","getElementById","value","state","this","className","onClick","type","defaultValue","id","onChange","mergeSort","selectionSort","map","val","idx","width","getWidth","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAAO,SAASA,EAAUC,GACtB,IAAMC,EAAe,GACrB,GAAGD,EAAME,QAAS,EAAG,OAAOF,EAC5B,IAAMG,EAAWH,EAAMI,SAK3B,SAASC,EACLC,EACAC,EACAC,EACAL,EACAF,GAEA,GAAIM,IAASC,EAAM,OACnB,IAAMC,EAASC,KAAKC,OAAOJ,EAAOC,GAAQ,GAC1CH,EAAYF,EAAUI,EAAKE,EAAQH,EAAWL,GAC9CI,EAAYF,EAASM,EAAS,EAAGD,EAAMF,EAAWL,GAItD,SAAiBK,EAAWC,EAAME,EAAQD,EAAML,EAAUF,GAElD,IAAIW,EAAIL,EACJM,EAAIN,EACJO,EAAIL,EAAS,EACjB,KAAOI,GAAKJ,GAAUK,GAAKN,GAEzBP,EAAcc,KAAK,CAACF,EAAGC,IAEvBb,EAAcc,KAAK,CAACF,EAAGC,IACnBX,EAASU,IAAMV,EAASW,IAE1Bb,EAAcc,KAAK,CAACH,EAAGT,EAASU,KAChCP,EAAUM,KAAOT,EAASU,OAG1BZ,EAAcc,KAAK,CAACH,EAAGT,EAASW,KAChCR,EAAUM,KAAOT,EAASW,MAG9B,KAAOD,GAAKJ,GAEVR,EAAcc,KAAK,CAACF,EAAGA,IAEvBZ,EAAcc,KAAK,CAACF,EAAGA,IAEvBZ,EAAcc,KAAK,CAACH,EAAGT,EAASU,KAChCP,EAAUM,KAAOT,EAASU,KAE5B,KAAOC,GAAKN,GAEVP,EAAcc,KAAK,CAACD,EAAGA,IAEvBb,EAAcc,KAAK,CAACD,EAAGA,IAEvBb,EAAcc,KAAK,CAACH,EAAGT,EAASW,KAChCR,EAAUM,KAAOT,EAASW,KAvChCE,CAASV,EAAWC,EAAME,EAAQD,EAAML,EAAUF,GAflDI,CAAYL,EAAM,EAAEA,EAAME,OAAO,EAAEC,EAASF,GAyD1C,SAAsBgB,GAEtB,IADA,IAAMC,EAAYC,SAASC,uBAAuB,aADjB,WAExBP,GAGP,GADsBA,EAAI,IAAM,EACb,CAAC,IAAD,cACcI,EAAWJ,GADzB,GACVQ,EADU,KACCC,EADD,KAEXC,EAAcL,EAAUG,GAAWG,MACnCC,EAAcP,EAAUI,GAAWE,MACnCE,EAAQb,EAAI,IAAM,EAAI,MAAQ,QACpCc,YAAW,WACTJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IAC3B,EAAFb,QAEHc,YAAW,WAAO,IAAD,cACgBV,EAAWJ,GAD3B,GACRQ,EADQ,KACGQ,EADH,KAEKX,EAAUG,GAAWG,MAC7BM,OAAZ,UAAwBD,EAAxB,QACG,EAAFhB,IAjBEA,EAAI,EAAGA,EAAII,EAAWf,OAAQW,IAAM,EAApCA,GA1DXkB,CAAa9B,GCLjB,IAAMiB,EAAYC,SAASC,uBAAuB,aAC3C,SAASY,EAAchC,GAE1B,IADA,IAAMiC,EAAY,GACVpB,EAAE,EAAEA,EAAEb,EAAME,OAAOW,IAAI,CAE3B,IADA,IAAIqB,EAAKrB,EACDC,EAAED,EAAE,EAAEC,EAAEd,EAAME,OAAOY,IACzBmB,EAAUlB,KAAK,CAACF,EAAEC,GAAE,EAAM,IAC1BmB,EAAUlB,KAAK,CAACF,EAAEC,GAAE,EAAM,IACvBd,EAAMc,GAAGd,EAAMkC,KAClBA,EAAMpB,GAEVmB,EAAUlB,KAAK,CAACF,EAAEb,EAAMkC,IAAK,IAC7BD,EAAUlB,KAAK,CAACmB,EAAIlC,EAAMa,IAAG,IAC7B,IAAIsB,EAAOnC,EAAMa,GACjBb,EAAMa,GAAKb,EAAMkC,GACjBlC,EAAMkC,GAAOC,EACVF,EAAUlB,KAAK,CAACF,EAAE,GAAE,EAAM,KAKrC,SAAsBuB,GAElB,IAFwB,IAAD,WAEfvB,GAFe,kBAGQuB,EAAKvB,GAHb,GAGbwB,EAHa,KAGXC,EAHW,KAGTC,EAHS,KAGGC,EAHH,KAIpB,GAAID,EAeA,CACA,IAAMhB,EAAcL,EAAUmB,GAAGb,MACjCG,YAAW,WACVJ,EAAYO,OAAZ,UAAwBQ,EAAxB,QACG,EAAFzB,OAnBU,CACZ,IAAMU,EAAcL,EAAUmB,GAAGb,MAC3BC,EAAcP,EAAUoB,GAAGd,MACjC,GAAO,IAAJgB,EAAM,CACT,IAAMd,EAAY,IAAJc,EAAQ,MAAQ,SAC9Bb,YAAW,WACVJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IAC3B,EAAFb,QAEFc,YAAW,WACVJ,EAAYK,gBAAkB,UAE3B,EAAFf,KAfDA,EAAE,EAAEA,EAAEuB,EAAKlC,OAAOW,IAAK,EAAvBA,GALRkB,CAAaE,G,ICwEFQ,E,YApFX,aAAc,IAAD,8BACT,+CAUJC,aAAa,SAACR,EAAIS,GACd,OAAQjC,KAAKC,MAAMD,KAAKkC,UAAYD,EAAKT,GAAOA,IAZvC,EAcbW,WAAW,SAACC,GAGR,IAFA,IAAM9C,EAAO,GAELa,EAAE,EAAEA,EAAEiC,EAAKjC,IAClBb,EAAMe,KAAK,EAAK2B,aAAa,EAAE,MAKhC,EAAKK,SAAS,CAAC/C,WAvBN,EA4BbgD,aAAa,WAEP,EAAKH,WAAW1B,SAAS8B,eAAe,WAAWC,QA5BrD,EAAKC,MAAO,CACRnD,MAAM,IAHD,E,iFAQToD,KAAKP,WAAW,KACf1B,SAAS8B,eAAe,WAAWC,MAAQ,M,+BAgBvCJ,GACL,OAAQ,KAAKA,EAAM,I,sCASnBd,EAAcoB,KAAKD,MAAMnD,S,kCAG1BD,EAAUqD,KAAKD,MAAMnD,S,+BAWd,IAAD,OACEA,EAASoD,KAAKD,MAAdnD,MACP,OACI,oCACA,yBAAKqD,UAAU,0CACX,0BAAMA,UAAU,uBAAhB,oBAGJ,4BAAQC,QAASF,KAAKJ,aAAcK,UAAU,0BAA9C,YAJA,cAImG,yBAAKA,UAAU,kBAChH,2BAAOE,KAAK,QAAQrB,IAAI,KAAKS,IAAI,MAAMa,aAAa,IAAIH,UAAU,SAASI,GAAG,UAC9EC,SAAUN,KAAKJ,gBAKjB,4BAAQM,QAAS,kBAAI,EAAKK,aAAaN,UAAU,0BAAjD,eAEA,4BAAQC,QAAS,kBAAI,EAAKM,iBAAiBP,UAAU,0BAArD,oBAGA,yBAAKA,UAAU,SACbrD,EAAM6D,KAAI,SAACC,EAAIC,GAAL,OACP,yBAAKV,UAAU,YAAY7B,MAAO,CAC9BM,OAAO,GAAD,OAAKgC,EAAL,MACNE,MAAK,UAAM,EAAKC,SAAS9C,SAAS8B,eAAe,WAAWC,OAAvD,OACPgB,IAAKH,a,GA3ECI,a,MCKVC,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASxD,SAAS8B,eAAe,SD4H3C,kBAAmB2B,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6e3c320a.chunk.js","sourcesContent":["export function mergesort(array){\r\n    const barsAnimation =[];\r\n    if(array.length <=1) return array;\r\n    const auxArray = array.slice();\r\n    mergeHelper(array,0,array.length-1,auxArray,barsAnimation);\r\n    getAnimation(barsAnimation);\r\n}\r\n\r\nfunction mergeHelper(\r\n    mainArray,\r\n    sidx,\r\n    eidx,\r\n    auxArray,\r\n    barsAnimation,\r\n  ) {\r\n    if (sidx === eidx) return;\r\n    const mididx = Math.floor((sidx + eidx) / 2);\r\n    mergeHelper(auxArray, sidx,mididx, mainArray, barsAnimation);\r\n    mergeHelper(auxArray,mididx + 1, eidx, mainArray, barsAnimation);\r\n    doMerge (mainArray, sidx, mididx, eidx, auxArray, barsAnimation);\r\n  }\r\n\r\nfunction doMerge(mainArray, sidx, mididx, eidx, auxArray, barsAnimation)\r\n    {\r\n        let k = sidx;\r\n        let i = sidx;\r\n        let j = mididx + 1;\r\n        while (i <= mididx && j <= eidx) {\r\n          \r\n          barsAnimation.push([i, j]);\r\n          \r\n          barsAnimation.push([i, j]);\r\n          if (auxArray[i] <= auxArray[j]) {\r\n          \r\n            barsAnimation.push([k, auxArray[i]]);\r\n            mainArray[k++] = auxArray[i++];\r\n          } else {\r\n           \r\n            barsAnimation.push([k, auxArray[j]]);\r\n            mainArray[k++] = auxArray[j++];\r\n          }\r\n        }\r\n        while (i <= mididx) {\r\n          \r\n          barsAnimation.push([i, i]);\r\n          \r\n          barsAnimation.push([i, i]);\r\n         \r\n          barsAnimation.push([k, auxArray[i]]);\r\n          mainArray[k++] = auxArray[i++];\r\n        }\r\n        while (j <= eidx) {\r\n          \r\n          barsAnimation.push([j, j]);\r\n         \r\n          barsAnimation.push([j, j]);\r\n          \r\n          barsAnimation.push([k, auxArray[j]]);\r\n          mainArray[k++] = auxArray[j++];\r\n        }\r\n      }\r\n      function getAnimation(animations){\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      for (let i = 0; i < animations.length; i++) {\r\n        \r\n        const isColorChange = i % 3 !== 2;\r\n        if (isColorChange) {\r\n          const [barOneIdx, barTwoIdx] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const barTwoStyle = arrayBars[barTwoIdx].style;\r\n          const color = i % 3 === 0 ? 'red' : 'green';\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n          }, i*3 );\r\n        } else {\r\n          setTimeout(() => {\r\n            const [barOneIdx, newHeight] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            barOneStyle.height = `${newHeight}px`;\r\n          }, i*3);\r\n        }\r\n      }\r\n    }","const arrayBars = document.getElementsByClassName('array-bar');\r\nexport function selectionsort(array){\r\n    const animation = [];\r\n    for(let i=0;i<array.length;i++){\r\n        let min =i;\r\n        for(let j=i+1;j<array.length;j++){\r\n            animation.push([i,j,false,0]);\r\n            animation.push([i,j,false,1]);\r\n            if(array[j]<array[min])\r\n            min = j;\r\n        }\r\n        animation.push([i,array[min],true]);\r\n        animation.push([min,array[i],true]);\r\n        let temp = array[i];\r\n        array[i] = array[min];\r\n        array[min] = temp;\r\n           animation.push([i,0,false,2]);\r\n    }\r\n    getAnimation(animation);\r\n\r\n}\r\nfunction getAnimation(anim){\r\n    \r\n    for(let i=0;i<anim.length;i++){\r\n       const [a,b,colorChange,x] = anim[i];\r\n       if(!colorChange){\r\n           const barOneStyle = arrayBars[a].style;\r\n           const barTwoStyle = arrayBars[b].style;\r\n           if(x!==2){\r\n           const color = x===0 ? 'red' : 'purple';\r\n           setTimeout(() => {\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n          }, i*1 );}\r\n          else\r\n          {setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'green';\r\n        \r\n          }, i*1 );} }\r\n       \r\n       else{\r\n           const barOneStyle = arrayBars[a].style;\r\n           setTimeout(() => {\r\n            barOneStyle.height = `${b}px`;\r\n          }, i*1);\r\n\r\n       }\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './visualizer.css';\r\nimport {mergesort} from '../algorithms/mergesort.js';\r\nimport {selectionsort} from '../algorithms/selectionsort.js';\r\n\r\nclass Visualizer extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            array:[]\r\n        };\r\n    }\r\n    \r\n    componentDidMount(){\r\n        this.resetArray(100);\r\n         document.getElementById(\"myrange\").value = 100;\r\n    }\r\n    getRandomInt=(min,max)=>{\r\n        return  Math.floor(Math.random() * (max- min) + min);\r\n     }\r\n    resetArray=(size)=>{\r\n        const array =[];\r\n      \r\n        for(let i=0;i<size;i++)\r\n        {array.push(this.getRandomInt(5,500));\r\n        \r\n        }\r\n\r\n       \r\n        this.setState({array});\r\n    }\r\n    getWidth(size){\r\n        return (1140/size)-2;\r\n    }\r\n    handleChange=()=>{\r\n      \r\n          this.resetArray(document.getElementById(\"myrange\").value);\r\n    }\r\n\r\n    selectionSort(){\r\n        \r\n        selectionsort(this.state.array);\r\n    }\r\n    mergeSort() {\r\n       mergesort(this.state.array);\r\n        \r\n      }\r\n     \r\n      \r\n\r\n\r\n  \r\n\r\n\r\n\r\n    render() { \r\n        const {array} = this.state;\r\n        return (\r\n            <> \r\n            <nav className=\"navbar navbar-expand-lg bg-secondary  \" >\r\n                <span className=\"navbar-brand h1 m-3\">\r\n                    ARRAY VISUALIZER\r\n                </span>\r\n            <button onClick={this.handleChange} className=\"btn btn-primary btn-lg\"> Shuffle</button>           <div className=\"slidecontainer\">\r\n              <input type=\"range\" min=\"10\" max=\"300\" defaultValue=\"3\" className=\"slider\" id=\"myrange\"\r\n              onChange={this.handleChange}/>\r\n                \r\n            </div> \r\n               \r\n               \r\n            <button onClick={()=>this.mergeSort()} className=\"btn btn-primary btn-lg\"> Merge Sort</button>\r\n            \r\n            <button onClick={()=>this.selectionSort()} className=\"btn btn-primary btn-lg\"> Selection Sort</button>  \r\n            \r\n            </nav>\r\n            <div className=\"fixed\">\r\n             {array.map((val,idx)=>(\r\n                 <div className=\"array-bar\" style={{\r\n                     height: `${val}px`,\r\n                     width : `${this.getWidth(document.getElementById(\"myrange\").value)}px`\r\n                 }}key={idx}></div>\r\n             ))}\r\n             </div>\r\n             \r\n           </>\r\n         );\r\n    }\r\n\r\n}\r\n \r\nexport default Visualizer;","import React from 'react';\nimport Visualizer from './components/visualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Visualizer/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}